{"version":3,"sources":["correct.png","wrong.jpg","lib/utils.js","GameItem.js","GameRow.js","GameBoard.js","Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","randomNum","min","max","n","i","push","Math","floor","random","GameItem","x","y","_this","this","index","props","row","react_default","a","createElement","className","onClick","handleClick","value","Component","values","GameRow","title","map","src_GameItem","GameBoard","GameRow_GameRow","titles","Modal","show","autoFocus","handleClose","correct","wrong","question","onSubmit","handleSubmit","type","playerAnswer","onChange","handleInputChange","src","alt","App","rows","state","activeQuestion","activeAnswer","questions","modal","message","fetchQuestions","_callee","categories","_ref2","_ref3","row0","row1","row2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","concat","sent","Object","slicedToArray","json","apply","toConsumableArray","clues","slice","forEach","item","key","setState","console","log","t0","errorMessage","stop","e","newQuestion","newAnswer","answer","launchModal","closeModal","target","preventDefault","toUpperCase","showCorrect","setTimeout","showFalse","src_GameBoard","Modal_Modal","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b5db533.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correct.0d290b6b.png\";","module.exports = __webpack_public_path__ + \"static/media/wrong.71de1848.jpg\";","export const randomNum = (min, max) => {\n  var n = [];\n  for (var i = 0; i < 3; i++) {\n    n.push(Math.floor(Math.random() * max) + min);\n  }\n  return n;\n};\n","import React, { Component } from \"react\";\nconst add = (x, y) => x + y;\nclass GameItem extends Component {\n  render() {\n    const index = add(this.props.index, this.props.row);\n    return (\n      <div className=\"game-item\" onClick={() => this.props.handleClick(index)}>\n        <div className=\"front\">{this.props.value}</div>\n      </div>\n    );\n  }\n}\nexport default GameItem;\n","import React from \"react\";\nimport GameItem from \"./GameItem\";\nconst values = [100, 200, 300, 400, 500];\nexport const GameRow = props => (\n  <div className=\"game-row\">\n    <div className=\"title\">{props.title}</div>\n    {values.map((value, index) => (\n      <GameItem\n        value={value}\n        index={index}\n        row={props.row}\n        handleClick={props.handleClick}\n      />\n    ))}\n  </div>\n);\n","import React, { Component } from \"react\";\nimport { GameRow } from \"./GameRow\";\n\nclass GameBoard extends Component {\n  render() {\n    return (\n      <div className=\"game-board\">\n        <div className=\"question-rows\">\n          <GameRow\n            row={0}\n            title={this.props.titles[0]}\n            handleClick={this.props.handleClick}\n          />\n          <GameRow\n            row={5}\n            title={this.props.titles[1]}\n            handleClick={this.props.handleClick}\n          />\n          <GameRow\n            row={10}\n            title={this.props.titles[2]}\n            handleClick={this.props.handleClick}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameBoard;\n","import React from \"react\";\nimport correct from \"./correct.png\";\nimport wrong from \"./wrong.jpg\";\n\nexport const Modal = props => {\n  return (\n    <div className={props.show ? \"modal\" : \"modal display-none\"}>\n      <div className=\"modal-content\" autoFocus={false}>\n        <button onClick={props.handleClose}>close</button>\n        <div\n          className={props.correct || props.wrong ? \"modal-question hide\" : \"\"}\n        >\n          <div>{props.question}</div>\n\n          <form onSubmit={props.handleSubmit}>\n            <input\n              autoFocus={true}\n              type=\"text\"\n              value={props.playerAnswer}\n              onChange={props.handleInputChange}\n            />\n          </form>\n        </div>\n        <div className={props.correct ? \"correct-show\" : \"correct-hide\"}>\n          <span>Correct!</span>\n          <img src={correct} alt=\"correct\" />\n        </div>\n        <div className={props.wrong ? \"wrong-show\" : \"wrong-hide\"}>\n          <span>InCorrect!</span>\n          <img src={wrong} alt=\"wrong\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { randomNum } from \"./lib/utils.js\";\nimport GameBoard from \"./GameBoard\";\nimport { AnswerInput } from \"./AnswerInput\";\nimport { Modal } from \"./Modal\";\nimport \"./App.css\";\n\nclass App extends Component {\n  rows = 3;\n\n  state = {\n    activeQuestion: \"\",\n    activeAnswer: \"\",\n    playerAnswer: \"\",\n    questions: [],\n    titles: [],\n    modal: false,\n    message: \"\",\n    correct: false,\n    wrong: false\n  };\n  componentDidMount() {\n    this.fetchQuestions();\n  }\n\n  fetchQuestions = async () => {\n    const categories = randomNum(1, 1300);\n    const questions = [];\n    const titles = [];\n\n    try {\n      let [row0, row1, row2] = await Promise.all([\n        fetch(\n          `https://cors-anywhere.herokuapp.com/http://jservice.io//api/category?id=${\n            categories[0]\n          }`\n        ),\n        fetch(\n          `https://cors-anywhere.herokuapp.com/http://jservice.io//api/category?id=${\n            categories[1]\n          }`\n        ),\n        fetch(\n          `https://cors-anywhere.herokuapp.com/http://jservice.io//api/category?id=${\n            categories[2]\n          }`\n        )\n      ]);\n      row0 = await row0.json();\n      row1 = await row1.json();\n      row2 = await row2.json();\n      questions.push(\n        ...row0.clues.slice(0, 5),\n        ...row1.clues.slice(0, 5),\n        ...row2.clues.slice(0, 5)\n      );\n      questions.forEach(function(item, index) {\n        item.key = index;\n      });\n      titles.push(row0.title, row1.title, row2.title);\n\n      this.setState({ questions, titles });\n      console.log(\"state\", this.state);\n    } catch (err) {\n      this.setState({ errorMessage: err });\n    }\n  };\n  handleClick = e => {\n    const newQuestion = this.state.questions[e].question;\n    const newAnswer = this.state.questions[e].answer;\n    this.setState({ activeQuestion: newQuestion, activeAnswer: newAnswer });\n    console.log(this.state.activeQuestion);\n    this.launchModal();\n  };\n  launchModal = () => {\n    this.setState({ modal: true });\n  };\n  closeModal = () => {\n    this.setState({\n      modal: false,\n      playerAnswer: \"\",\n      wrong: false,\n      correct: false\n    });\n  };\n  handleInputChange = e => {\n    this.setState({\n      playerAnswer: e.target.value\n    });\n    console.log(this.state.playerAnswer);\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      this.state.playerAnswer.toUpperCase() ===\n      this.state.activeAnswer.toUpperCase()\n    ) {\n      this.showCorrect();\n      setTimeout(() => this.setState({ correct: false, modal: false }), 3000);\n    } else {\n      this.showFalse();\n      setTimeout(() => this.setState({ wrong: false }), 3000);\n    }\n    this.setState({ playerAnswer: \"\" });\n    setTimeout(() => this.setState({ correct: false, wrong: false }), 3000);\n  };\n  showFalse = () => {\n    this.setState({ wrong: true });\n  };\n\n  showCorrect = () => {\n    this.setState({ correct: true });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <GameBoard\n          handleClick={this.handleClick}\n          titles={this.state.titles}\n          question={this.state.questions}\n        />\n        <Modal\n          show={this.state.modal}\n          question={this.state.activeQuestion}\n          handleSubmit={this.handleSubmit}\n          handleInputChange={this.handleInputChange}\n          playerAnswer={this.state.playerAnswer}\n          correct={this.state.correct}\n          wrong={this.state.wrong}\n          handleClose={this.closeModal}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}